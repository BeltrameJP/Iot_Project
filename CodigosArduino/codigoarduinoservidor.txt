#include <LiquidCrystal.h> // declara a utilização da biblioteca LiquidCrystal
#include <PN532.h>
#include <SPI.h>

#define correntein A5
//leitor rfid
#define PN532_CS 10
PN532 nfc(PN532_CS);
#define  NFC_DEMO_DEBUG 1

int rele = 8; //pino 8

char buf; //buffer comunicação raspberry

/*cria um objeto tipo LiquidCrystal que chamei de "lcd" nos pinos citados:
LiquidCrystal(rs, enable, d4, d5, d6, d7)*/ 
LiquidCrystal lcd(7, 6, 5, 4, 3, 2);

int leitura,cont;
const float adc_zero = 511;       //Vref+ = 5V Vref- = -5V n= 10bits zero digital da entrada do arduino
const unsigned long tamostra = 100000;  //tempo de amostragem  em (us)                 
const unsigned long numamostra = 250;  //numero de leituras
const unsigned long intervaloamostra = tamostra/numamostra; //Intervalo de amostragem , deve ser maior que o tempo de conversão AD (tempo entre cada leitura)
unsigned long prevMicros, tensao, iac;
unsigned int count;
float irms, potac ; // Variaveis medidas (Corrente Eficaz e Potência Eficaz)
uint32_t tag;
boolean flag = 0;


//inicializa as funcoes
uint32_t le_tag();
float le_corrente();

void setup(){
   
  lcd.begin(16, 2);  // Inicia a biblioteca do LCD
  Serial.begin(9600); //Inicia a comunicação serial com bound 9600
 
  pinMode(rele, OUTPUT); //Pino de controle do rele

  //verifica se o leitor rfid está presente e pode ser inicializado
#ifdef NFC_DEMO_DEBUG
//  Serial.begin(9600);
//  Serial.println("Hello!");
#endif
  nfc.begin();

  uint32_t versiondata = nfc.getFirmwareVersion();
  if (! versiondata) {
#ifdef NFC_DEMO_DEBUG
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Leitor RFID:");
    lcd.setCursor(0,1);
    lcd.print("erro ou ausente");
#endif
    while (1); // halt
  }
#ifdef NFC_DEMO_DEBUG
  // Got ok data, print it out!
  lcd.setCursor(0,0);
  lcd.print("Leitor RFID:");
  lcd.setCursor(0,1);
  lcd.print("inicializado");
 
#endif
  // configure board to read RFID tags and cards
  nfc.SAMConfig();

  delay(1000);
} 
  

//====================FIM DO SETUP=======================
 
//===========================LOOP PRINCIPAL=======================

void loop(){
  
  
  //==================================== Potência =====================================
  
    
   irms = le_corrente();
   potac = 127*irms;
   tag = le_tag(); 

      if(tag){
        Serial.println("tag"); //envia o numero da tag no formato tag,35678699
        Serial.println(",");
        Serial.println(tag);
        }
      buf = Serial.read(); //atualiza o comando recebido pelo servidor
  
        
    // Age de acordo com o caractere recebido. Ações diferentes para mudanças de estado
    if (buf == 'A'){ //autorizado,ocupado
        if(!flag){
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Autorizado,");
          lcd.setCursor(0,1);
          lcd.print("");
          delay(500);
          flag = 1;
          digitalWrite(rele, HIGH);
          }
          else{
            
               Serial.println("pot");
               Serial.println(",");
               Serial.println(potac); //envia a leitura do sensor de corrente no formato pot,8
             
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("Ocupado!");
            lcd.setCursor(0,1);
            lcd.print("aguarde...");
            delay(500);
        }
      }
     else if (buf == 'N'){ //nao autorizado, livre
        if(flag){
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Saida");
          lcd.setCursor(0,1);
          lcd.print("registrada");
          digitalWrite(rele, LOW);
          flag = 0;
          delay(500);
          }
           else if(tag){
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("Nao");
            lcd.setCursor(0,1);
            lcd.print("autorizado");
            delay(500);
            }
          else{
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("Aguardando");
            lcd.setCursor(0,1);
            lcd.print("cartao");
            delay(500);
            }
     }
     else{
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Aguardando");
        lcd.setCursor(0,1);
        lcd.print("servidor");
        delay(500);
      }
      
     
}
//============================================== FIM da função LOOP ================================================== 


// ============================ Sensor de CORRENTE ========================================

float le_corrente(){
    leitura = 0;
    tensao = 0; 
    count = 0;   
   while(count < numamostra){
    
                          prevMicros = micros() - intervaloamostra ;
                          if (micros() - prevMicros >= intervaloamostra) // Garante que o tempo entre cada leitura seja  maior que o de conversão AD.
                          {
                                                   leitura = analogRead(correntein) - adc_zero;   // para leitura de corrente negativa
                                                   tensao += (leitura * leitura);  // Somatorio de tensao^2   de 0 até N=numamostra
                                                   ++count;
                                                   prevMicros += intervaloamostra;
                                                                        }
                          }
                         
   // Corrente eficaz alternada:                                
   irms = sqrt((float)tensao/(float)numamostra) * (27.03 / 1023.0);
   return irms;
}

//============================================== Leitura do NFC ================================================== 
uint32_t le_tag(){
uint32_t id;
  // look for MiFare type cards
  id = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A);

  if (id != 0) {
#ifdef NFC_DEMO_DEBUG
   // Serial.print("Read card #"); 
   // Serial.println(id);
#endif
  }
return id;
}
